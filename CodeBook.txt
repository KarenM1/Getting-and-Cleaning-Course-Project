Getting and Cleaning course project


The variables used in this project for the tidySetofMeans data file come from the Human Activity Recognition Using Smartphones Dataset.  
See the README.txt file in the UCI HAR Dataset file for details on that study.

The variables used in this project are a subset of the UCI HAR dataset, and incldues only the mean and standard deviation variables from the larger dataset (detailed list is below).   
The goal of this project was to download, unzip, and combine data from the UCI HAR dataset, then take a subset of the data and prepare a tidy dataset to be used in further analysis.
The result of this project is a dataset called tidySetofMeans.

The variables in the source dataset describe the accelerometer and gyroscope 3-axial raw signals tAcc-XYZ and tGyro-XYZ. 
These were filtered to remove noise and the acceleration signal was then separated into body and gravity acceleration signals, tBodyAcc-XYZ and tGravityAcc-XYZ.
The body linear acceleration and angular velocity were derived in time to obtain Jerk signals, tBodyAccJerk-XYZ and tBodyGyroJerk-XYZ. 
The magnitude of these three-dimensional signals were calculated using the Euclidean norm, resulting in tBodyAccMag, tGravityAccMag, tBodyAccJerkMag, tBodyGyroMag, tBodyGyroJerkMag. 
A Fast Fourier Transform (FFT) was applied to some of these signals producing fBodyAcc-XYZ, fBodyAccJerk-XYZ, fBodyGyro-XYZ, fBodyAccJerkMag, fBodyGyroMag, fBodyGyroJerkMag. 

Time domain signals have prefix 't' and units seconds, and frequency domain signals have prefix 'f' and units hertz (Hz).
'-XYZ' is used to denote 3-axial signals in the X, Y and Z directions.
mean() indicates a mean value and std() indicates a standard deviation

Variables in the tidySetofMeans dataset are:
subjectid - integer, range 1 to 30, identifies subjects from which readings were taken
activity - character, values "LAYING", "SITTING", STANDING", "WALKING", "WALKING_DOWNSTAIRS", "WALKING_UPSTAIRS"
All remaining 79 variables are class numeric:
tBodyAcc-mean()-X
tBodyAcc-mean()-Y
tBodyAcc-mean()-Z
tBodyAcc-std()-X
tBodyAcc-std()-Y
tBodyAcc-std()-Z
tGravityAcc-mean()-X
tGravityAcc-mean()-Y
tGravityAcc-mean()-Z
tGravityAcc-std()-X
tGravityAcc-std()-Y
tGravityAcc-std()-Z
tBodyAccJerk-mean()-X
tBodyAccJerk-mean()-Y
tBodyAccJerk-mean()-Z
tBodyAccJerk-std()-X
tBodyAccJerk-std()-Y
tBodyAccJerk-std()-Z
tBodyGyro-mean()-X
tBodyGyro-mean()-Y
tBodyGyro-mean()-Z
tBodyGyro-std()-X
tBodyGyro-std()-Y
tBodyGyro-std()-Z
tBodyGyroJerk-mean()-X
tBodyGyroJerk-mean()-Y
tBodyGyroJerk-mean()-Z
tBodyGyroJerk-std()-X
tBodyGyroJerk-std()-Y
tBodyGyroJerk-std()-Z
tBodyAccMag-mean()
tBodyAccMag-std()
tGravityAccMag-mean()
tGravityAccMag-std()
tBodyAccJerkMag-mean()
tBodyAccJerkMag-std()
tBodyGyroMag-mean()
tBodyGyroMag-std()
tBodyGyroJerkMag-mean()
tBodyGyroJerkMag-std()
fBodyAcc-mean()-X
fBodyAcc-mean()-Y
fBodyAcc-mean()-Z
fBodyAcc-std()-X
fBodyAcc-std()-Y
fBodyAcc-std()-Z
fBodyAcc-meanFreq()-X
fBodyAcc-meanFreq()-Y
fBodyAcc-meanFreq()-Z
fBodyAccJerk-mean()-X
fBodyAccJerk-mean()-Y
fBodyAccJerk-mean()-Z
fBodyAccJerk-std()-X
fBodyAccJerk-std()-Y
fBodyAccJerk-std()-Z
fBodyAccJerk-meanFreq()-X
fBodyAccJerk-meanFreq()-Y
fBodyAccJerk-meanFreq()-Z
fBodyGyro-mean()-X
fBodyGyro-mean()-Y
fBodyGyro-mean()-Z
fBodyGyro-std()-X
fBodyGyro-std()-Y
fBodyGyro-std()-Z
fBodyGyro-meanFreq()-X
fBodyGyro-meanFreq()-Y
fBodyGyro-meanFreq()-Z
fBodyAccMag-mean()
fBodyAccMag-std()
fBodyAccMag-meanFreq()
fBodyBodyAccJerkMag-mean()
fBodyBodyAccJerkMag-std()
fBodyBodyAccJerkMag-meanFreq()
fBodyBodyGyroMag-mean()
fBodyBodyGyroMag-std()
fBodyBodyGyroMag-meanFreq()
fBodyBodyGyroJerkMag-mean()
fBodyBodyGyroJerkMag-std()
fBodyBodyGyroJerkMag-meanFreq()

Steps to create the tidySetofMeans dataset are these:
1. Download the source file from https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip and unzip it.
   setwd("C:/Users/kmassey/datasciencecoursera/Course Project")
   url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
   download.file(url,
              destfile='HAR.zip',
              mode="wb") # "wb" means "write binary," and is used for binary files
   unzip(zipfile = "HAR.zip") # unpack the files into subdirectories 
   # with thanks to lgreski Tutorial: Downloading files at https://github.com/lgreski/datasciencectacontent/blob/master/markdown/rprog-downloadingFiles.md

2. Create a new directory and copy the test and train files to it. Set the working directory to the new directory.
   dir.create("runAnalysis")
   targetdir <- c("C:/Users/kmassey/datasciencecoursera/Course Project/runAnalysis")
   setwd("C:/Users/kmassey/datasciencecoursera/Course Project/UCI HAR Dataset/test")
   filestocopy<-c("subject_test.txt","X_test.txt","y_test.txt")
   file.copy(from=filestocopy, to=targetdir)
   setwd("C:/Users/kmassey/datasciencecoursera/Course Project/UCI HAR Dataset/train")
   filestocopy<-c("subject_train.txt","X_train.txt","y_train.txt")
   file.copy(from=filestocopy, to=targetdir)
   setwd("C:/Users/kmassey/datasciencecoursera/Course Project/runAnalysis")

3.  Use read.table to read the .txt files into dataframes:
    testFile<- read.table("X_test.txt", header = FALSE, sep = "") # data file for test data
    trainFile<- read.table("X_train.txt", header = FALSE, sep = "") # data file for train data
    testSubjects<- read.table("subject_test.txt", header = FALSE, sep = "") # subject file for test data
    trainSubjects<-read.table("subject_train.txt", header = FALSE, sep = "") # subject file for train data
    testActivityLabels<- read.table("y_test.txt", header = FALSE, sep = "") # activity identifiers for test data
    trainActivityLabels<-read.table("y_train.txt", header = FALSE, sep = "") # activity identifiers for train data
    activityLabels<- read.table("activity_labels.txt", header = FALSE, sep = "") # readable names for activities mapped to identifiers
    featuresVariables<- read.table("features.txt", header = FALSE, sep = "", stringsAsFactors = FALSE) # variable names to use as column names in a later step

4.  Merge the training and the test sets to create one data set - this item responds to requirement #1 of the rubric.
    combinedData<-rbind(testFile,trainFile)
    combinedSubjects<-rbind(testSubjects,trainSubjects)
    combinedActivityLabels<-rbind(testActivityLabels,trainActivityLabels)

5.  Add column names - this item responds to requirement #4 of the rubric. 
    colnames(combinedData)<-c(featuresVariables[,2])
    names(combinedSubjects)<-"subjectid"
    names(combinedActivityLabels)<-"activity"

6.  Extract only the measurements on the mean and standard deviation for each measurement - this item responds to requirement #2 of the rubric.
    library(dplyr)
    meanStd<-combinedData[,grepl("mean|std",colnames(combinedData))] 

7.  Add subject and activity columns to the combined data set
    combinedMeanStd<-cbind(combinedSubjects,combinedActivityLabels,meanStd)

8.  Convert code values for activities to activity labels - this item responds to requirement #3 of the rubric.
    combinedMeanStd$activity<-gsub("1",activityLabels[1,2],combinedMeanStd$activity)
    combinedMeanStd$activity<-gsub("2",activityLabels[2,2],combinedMeanStd$activity)
    combinedMeanStd$activity<-gsub("3",activityLabels[3,2],combinedMeanStd$activity)
    combinedMeanStd$activity<-gsub("4",activityLabels[4,2],combinedMeanStd$activity)
    combinedMeanStd$activity<-gsub("5",activityLabels[5,2],combinedMeanStd$activity)
    combinedMeanStd$activity<-gsub("6",activityLabels[6,2],combinedMeanStd$activity)

9.  Create a tidy data set with the average of each variable for each activity and each subject - this item responds to requirement #5 of the rubric.
    groupedData<-group_by(combinedMeanStd,subjectid,activity)
    tidySetofMeans<-summarize_all(groupedData,mean)
    write.csv(tidySetofMeans,"tidySetofMeans.csv")